/*
 * Organization Management API
 * API for managing organizations, departments, teams, and user assignments.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Organization;
import org.openapitools.client.model.OrganizationCreate;
import org.openapitools.client.model.OrganizationUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for organizationsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return organizationsGetCall(_callback);

    }

    /**
     * Get all organizations
     * 
     * @return List&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public List<Organization> organizationsGet() throws ApiException {
        ApiResponse<List<Organization>> localVarResp = organizationsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all organizations
     * 
     * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organization>> organizationsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = organizationsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all organizations (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsGetAsync(final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsIdOrganizationChildrenGet
     * @param idOrganization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of child departments or teams </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsIdOrganizationChildrenGetCall(Integer idOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrganization}/children"
            .replace("{" + "idOrganization" + "}", localVarApiClient.escapeString(idOrganization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsIdOrganizationChildrenGetValidateBeforeCall(Integer idOrganization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrganization' is set
        if (idOrganization == null) {
            throw new ApiException("Missing the required parameter 'idOrganization' when calling organizationsIdOrganizationChildrenGet(Async)");
        }

        return organizationsIdOrganizationChildrenGetCall(idOrganization, _callback);

    }

    /**
     * Get child departments or teams of an organization
     * 
     * @param idOrganization  (required)
     * @return List&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of child departments or teams </td><td>  -  </td></tr>
     </table>
     */
    public List<Organization> organizationsIdOrganizationChildrenGet(Integer idOrganization) throws ApiException {
        ApiResponse<List<Organization>> localVarResp = organizationsIdOrganizationChildrenGetWithHttpInfo(idOrganization);
        return localVarResp.getData();
    }

    /**
     * Get child departments or teams of an organization
     * 
     * @param idOrganization  (required)
     * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of child departments or teams </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organization>> organizationsIdOrganizationChildrenGetWithHttpInfo(Integer idOrganization) throws ApiException {
        okhttp3.Call localVarCall = organizationsIdOrganizationChildrenGetValidateBeforeCall(idOrganization, null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get child departments or teams of an organization (asynchronously)
     * 
     * @param idOrganization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of child departments or teams </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsIdOrganizationChildrenGetAsync(Integer idOrganization, final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsIdOrganizationChildrenGetValidateBeforeCall(idOrganization, _callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsIdOrganizationDelete
     * @param idOrganization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Organization deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsIdOrganizationDeleteCall(Integer idOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrganization}"
            .replace("{" + "idOrganization" + "}", localVarApiClient.escapeString(idOrganization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsIdOrganizationDeleteValidateBeforeCall(Integer idOrganization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrganization' is set
        if (idOrganization == null) {
            throw new ApiException("Missing the required parameter 'idOrganization' when calling organizationsIdOrganizationDelete(Async)");
        }

        return organizationsIdOrganizationDeleteCall(idOrganization, _callback);

    }

    /**
     * Delete an organization
     * 
     * @param idOrganization  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Organization deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public void organizationsIdOrganizationDelete(Integer idOrganization) throws ApiException {
        organizationsIdOrganizationDeleteWithHttpInfo(idOrganization);
    }

    /**
     * Delete an organization
     * 
     * @param idOrganization  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Organization deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organizationsIdOrganizationDeleteWithHttpInfo(Integer idOrganization) throws ApiException {
        okhttp3.Call localVarCall = organizationsIdOrganizationDeleteValidateBeforeCall(idOrganization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an organization (asynchronously)
     * 
     * @param idOrganization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Organization deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsIdOrganizationDeleteAsync(Integer idOrganization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsIdOrganizationDeleteValidateBeforeCall(idOrganization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsIdOrganizationGet
     * @param idOrganization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsIdOrganizationGetCall(Integer idOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrganization}"
            .replace("{" + "idOrganization" + "}", localVarApiClient.escapeString(idOrganization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsIdOrganizationGetValidateBeforeCall(Integer idOrganization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrganization' is set
        if (idOrganization == null) {
            throw new ApiException("Missing the required parameter 'idOrganization' when calling organizationsIdOrganizationGet(Async)");
        }

        return organizationsIdOrganizationGetCall(idOrganization, _callback);

    }

    /**
     * Get details of an organization
     * 
     * @param idOrganization  (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization details </td><td>  -  </td></tr>
     </table>
     */
    public Organization organizationsIdOrganizationGet(Integer idOrganization) throws ApiException {
        ApiResponse<Organization> localVarResp = organizationsIdOrganizationGetWithHttpInfo(idOrganization);
        return localVarResp.getData();
    }

    /**
     * Get details of an organization
     * 
     * @param idOrganization  (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> organizationsIdOrganizationGetWithHttpInfo(Integer idOrganization) throws ApiException {
        okhttp3.Call localVarCall = organizationsIdOrganizationGetValidateBeforeCall(idOrganization, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of an organization (asynchronously)
     * 
     * @param idOrganization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsIdOrganizationGetAsync(Integer idOrganization, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsIdOrganizationGetValidateBeforeCall(idOrganization, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsIdOrganizationPut
     * @param idOrganization  (required)
     * @param organizationUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsIdOrganizationPutCall(Integer idOrganization, OrganizationUpdate organizationUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationUpdate;

        // create path and map variables
        String localVarPath = "/organizations/{idOrganization}"
            .replace("{" + "idOrganization" + "}", localVarApiClient.escapeString(idOrganization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsIdOrganizationPutValidateBeforeCall(Integer idOrganization, OrganizationUpdate organizationUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrganization' is set
        if (idOrganization == null) {
            throw new ApiException("Missing the required parameter 'idOrganization' when calling organizationsIdOrganizationPut(Async)");
        }

        // verify the required parameter 'organizationUpdate' is set
        if (organizationUpdate == null) {
            throw new ApiException("Missing the required parameter 'organizationUpdate' when calling organizationsIdOrganizationPut(Async)");
        }

        return organizationsIdOrganizationPutCall(idOrganization, organizationUpdate, _callback);

    }

    /**
     * Update an organization
     * 
     * @param idOrganization  (required)
     * @param organizationUpdate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public void organizationsIdOrganizationPut(Integer idOrganization, OrganizationUpdate organizationUpdate) throws ApiException {
        organizationsIdOrganizationPutWithHttpInfo(idOrganization, organizationUpdate);
    }

    /**
     * Update an organization
     * 
     * @param idOrganization  (required)
     * @param organizationUpdate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organizationsIdOrganizationPutWithHttpInfo(Integer idOrganization, OrganizationUpdate organizationUpdate) throws ApiException {
        okhttp3.Call localVarCall = organizationsIdOrganizationPutValidateBeforeCall(idOrganization, organizationUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an organization (asynchronously)
     * 
     * @param idOrganization  (required)
     * @param organizationUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsIdOrganizationPutAsync(Integer idOrganization, OrganizationUpdate organizationUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsIdOrganizationPutValidateBeforeCall(idOrganization, organizationUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsPost
     * @param organizationCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsPostCall(OrganizationCreate organizationCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationCreate;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsPostValidateBeforeCall(OrganizationCreate organizationCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationCreate' is set
        if (organizationCreate == null) {
            throw new ApiException("Missing the required parameter 'organizationCreate' when calling organizationsPost(Async)");
        }

        return organizationsPostCall(organizationCreate, _callback);

    }

    /**
     * Create a new organization
     * 
     * @param organizationCreate  (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization created successfully </td><td>  -  </td></tr>
     </table>
     */
    public Organization organizationsPost(OrganizationCreate organizationCreate) throws ApiException {
        ApiResponse<Organization> localVarResp = organizationsPostWithHttpInfo(organizationCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new organization
     * 
     * @param organizationCreate  (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> organizationsPostWithHttpInfo(OrganizationCreate organizationCreate) throws ApiException {
        okhttp3.Call localVarCall = organizationsPostValidateBeforeCall(organizationCreate, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new organization (asynchronously)
     * 
     * @param organizationCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Organization created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsPostAsync(OrganizationCreate organizationCreate, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsPostValidateBeforeCall(organizationCreate, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsSearchGet
     * @param name  (optional)
     * @param type  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsSearchGetCall(String name, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsSearchGetValidateBeforeCall(String name, String type, final ApiCallback _callback) throws ApiException {
        return organizationsSearchGetCall(name, type, _callback);

    }

    /**
     * Search organizations by name or type
     * 
     * @param name  (optional)
     * @param type  (optional)
     * @return List&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching organizations </td><td>  -  </td></tr>
     </table>
     */
    public List<Organization> organizationsSearchGet(String name, String type) throws ApiException {
        ApiResponse<List<Organization>> localVarResp = organizationsSearchGetWithHttpInfo(name, type);
        return localVarResp.getData();
    }

    /**
     * Search organizations by name or type
     * 
     * @param name  (optional)
     * @param type  (optional)
     * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching organizations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organization>> organizationsSearchGetWithHttpInfo(String name, String type) throws ApiException {
        okhttp3.Call localVarCall = organizationsSearchGetValidateBeforeCall(name, type, null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search organizations by name or type (asynchronously)
     * 
     * @param name  (optional)
     * @param type  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsSearchGetAsync(String name, String type, final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsSearchGetValidateBeforeCall(name, type, _callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
