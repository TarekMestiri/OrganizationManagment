/*
 * Organization Management API
 * API for managing organizations, departments, teams, and user assignments.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Department;
import org.openapitools.client.model.DepartmentCreate;
import org.openapitools.client.model.DepartmentUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DepartmentManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DepartmentManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DepartmentManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for departmentsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of departments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departmentsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return departmentsGetCall(_callback);

    }

    /**
     * Get all departments
     * 
     * @return List&lt;Department&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of departments </td><td>  -  </td></tr>
     </table>
     */
    public List<Department> departmentsGet() throws ApiException {
        ApiResponse<List<Department>> localVarResp = departmentsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all departments
     * 
     * @return ApiResponse&lt;List&lt;Department&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of departments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Department>> departmentsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = departmentsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Department>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all departments (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of departments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsGetAsync(final ApiCallback<List<Department>> _callback) throws ApiException {

        okhttp3.Call localVarCall = departmentsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Department>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for departmentsIdDepartmentDelete
     * @param idDepartment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Department deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsIdDepartmentDeleteCall(Integer idDepartment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departments/{idDepartment}"
            .replace("{" + "idDepartment" + "}", localVarApiClient.escapeString(idDepartment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departmentsIdDepartmentDeleteValidateBeforeCall(Integer idDepartment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idDepartment' is set
        if (idDepartment == null) {
            throw new ApiException("Missing the required parameter 'idDepartment' when calling departmentsIdDepartmentDelete(Async)");
        }

        return departmentsIdDepartmentDeleteCall(idDepartment, _callback);

    }

    /**
     * Delete a department
     * 
     * @param idDepartment  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Department deleted </td><td>  -  </td></tr>
     </table>
     */
    public void departmentsIdDepartmentDelete(Integer idDepartment) throws ApiException {
        departmentsIdDepartmentDeleteWithHttpInfo(idDepartment);
    }

    /**
     * Delete a department
     * 
     * @param idDepartment  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Department deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> departmentsIdDepartmentDeleteWithHttpInfo(Integer idDepartment) throws ApiException {
        okhttp3.Call localVarCall = departmentsIdDepartmentDeleteValidateBeforeCall(idDepartment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a department (asynchronously)
     * 
     * @param idDepartment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Department deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsIdDepartmentDeleteAsync(Integer idDepartment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = departmentsIdDepartmentDeleteValidateBeforeCall(idDepartment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for departmentsIdDepartmentGet
     * @param idDepartment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsIdDepartmentGetCall(Integer idDepartment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departments/{idDepartment}"
            .replace("{" + "idDepartment" + "}", localVarApiClient.escapeString(idDepartment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departmentsIdDepartmentGetValidateBeforeCall(Integer idDepartment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idDepartment' is set
        if (idDepartment == null) {
            throw new ApiException("Missing the required parameter 'idDepartment' when calling departmentsIdDepartmentGet(Async)");
        }

        return departmentsIdDepartmentGetCall(idDepartment, _callback);

    }

    /**
     * Get department details
     * 
     * @param idDepartment  (required)
     * @return Department
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department details </td><td>  -  </td></tr>
     </table>
     */
    public Department departmentsIdDepartmentGet(Integer idDepartment) throws ApiException {
        ApiResponse<Department> localVarResp = departmentsIdDepartmentGetWithHttpInfo(idDepartment);
        return localVarResp.getData();
    }

    /**
     * Get department details
     * 
     * @param idDepartment  (required)
     * @return ApiResponse&lt;Department&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Department> departmentsIdDepartmentGetWithHttpInfo(Integer idDepartment) throws ApiException {
        okhttp3.Call localVarCall = departmentsIdDepartmentGetValidateBeforeCall(idDepartment, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get department details (asynchronously)
     * 
     * @param idDepartment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsIdDepartmentGetAsync(Integer idDepartment, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = departmentsIdDepartmentGetValidateBeforeCall(idDepartment, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for departmentsIdDepartmentPut
     * @param idDepartment  (required)
     * @param departmentUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsIdDepartmentPutCall(Integer idDepartment, DepartmentUpdate departmentUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentUpdate;

        // create path and map variables
        String localVarPath = "/departments/{idDepartment}"
            .replace("{" + "idDepartment" + "}", localVarApiClient.escapeString(idDepartment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departmentsIdDepartmentPutValidateBeforeCall(Integer idDepartment, DepartmentUpdate departmentUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idDepartment' is set
        if (idDepartment == null) {
            throw new ApiException("Missing the required parameter 'idDepartment' when calling departmentsIdDepartmentPut(Async)");
        }

        // verify the required parameter 'departmentUpdate' is set
        if (departmentUpdate == null) {
            throw new ApiException("Missing the required parameter 'departmentUpdate' when calling departmentsIdDepartmentPut(Async)");
        }

        return departmentsIdDepartmentPutCall(idDepartment, departmentUpdate, _callback);

    }

    /**
     * Update a department
     * 
     * @param idDepartment  (required)
     * @param departmentUpdate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department updated </td><td>  -  </td></tr>
     </table>
     */
    public void departmentsIdDepartmentPut(Integer idDepartment, DepartmentUpdate departmentUpdate) throws ApiException {
        departmentsIdDepartmentPutWithHttpInfo(idDepartment, departmentUpdate);
    }

    /**
     * Update a department
     * 
     * @param idDepartment  (required)
     * @param departmentUpdate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> departmentsIdDepartmentPutWithHttpInfo(Integer idDepartment, DepartmentUpdate departmentUpdate) throws ApiException {
        okhttp3.Call localVarCall = departmentsIdDepartmentPutValidateBeforeCall(idDepartment, departmentUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a department (asynchronously)
     * 
     * @param idDepartment  (required)
     * @param departmentUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsIdDepartmentPutAsync(Integer idDepartment, DepartmentUpdate departmentUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = departmentsIdDepartmentPutValidateBeforeCall(idDepartment, departmentUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for departmentsPost
     * @param departmentCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Department created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsPostCall(DepartmentCreate departmentCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentCreate;

        // create path and map variables
        String localVarPath = "/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departmentsPostValidateBeforeCall(DepartmentCreate departmentCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'departmentCreate' is set
        if (departmentCreate == null) {
            throw new ApiException("Missing the required parameter 'departmentCreate' when calling departmentsPost(Async)");
        }

        return departmentsPostCall(departmentCreate, _callback);

    }

    /**
     * Create a department
     * 
     * @param departmentCreate  (required)
     * @return Department
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Department created </td><td>  -  </td></tr>
     </table>
     */
    public Department departmentsPost(DepartmentCreate departmentCreate) throws ApiException {
        ApiResponse<Department> localVarResp = departmentsPostWithHttpInfo(departmentCreate);
        return localVarResp.getData();
    }

    /**
     * Create a department
     * 
     * @param departmentCreate  (required)
     * @return ApiResponse&lt;Department&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Department created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Department> departmentsPostWithHttpInfo(DepartmentCreate departmentCreate) throws ApiException {
        okhttp3.Call localVarCall = departmentsPostValidateBeforeCall(departmentCreate, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a department (asynchronously)
     * 
     * @param departmentCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Department created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsPostAsync(DepartmentCreate departmentCreate, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = departmentsPostValidateBeforeCall(departmentCreate, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
