/*
 * Organization Management API
 * API for managing organizations, departments, teams, and user assignments.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamCreate;
import org.openapitools.client.model.TeamUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for teamsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of teams </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return teamsGetCall(_callback);

    }

    /**
     * Get all teams
     * 
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of teams </td><td>  -  </td></tr>
     </table>
     */
    public List<Team> teamsGet() throws ApiException {
        ApiResponse<List<Team>> localVarResp = teamsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all teams
     * 
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of teams </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Team>> teamsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all teams (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of teams </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetAsync(final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsIdTeamDelete
     * @param idTeam  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Team deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdTeamDeleteCall(@javax.annotation.Nonnull Integer idTeam, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{idTeam}"
            .replace("{" + "idTeam" + "}", localVarApiClient.escapeString(idTeam.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsIdTeamDeleteValidateBeforeCall(@javax.annotation.Nonnull Integer idTeam, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idTeam' is set
        if (idTeam == null) {
            throw new ApiException("Missing the required parameter 'idTeam' when calling teamsIdTeamDelete(Async)");
        }

        return teamsIdTeamDeleteCall(idTeam, _callback);

    }

    /**
     * Delete a team
     * 
     * @param idTeam  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Team deleted </td><td>  -  </td></tr>
     </table>
     */
    public void teamsIdTeamDelete(@javax.annotation.Nonnull Integer idTeam) throws ApiException {
        teamsIdTeamDeleteWithHttpInfo(idTeam);
    }

    /**
     * Delete a team
     * 
     * @param idTeam  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Team deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsIdTeamDeleteWithHttpInfo(@javax.annotation.Nonnull Integer idTeam) throws ApiException {
        okhttp3.Call localVarCall = teamsIdTeamDeleteValidateBeforeCall(idTeam, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a team (asynchronously)
     * 
     * @param idTeam  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Team deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdTeamDeleteAsync(@javax.annotation.Nonnull Integer idTeam, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsIdTeamDeleteValidateBeforeCall(idTeam, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsIdTeamGet
     * @param idTeam  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdTeamGetCall(@javax.annotation.Nonnull Integer idTeam, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{idTeam}"
            .replace("{" + "idTeam" + "}", localVarApiClient.escapeString(idTeam.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsIdTeamGetValidateBeforeCall(@javax.annotation.Nonnull Integer idTeam, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idTeam' is set
        if (idTeam == null) {
            throw new ApiException("Missing the required parameter 'idTeam' when calling teamsIdTeamGet(Async)");
        }

        return teamsIdTeamGetCall(idTeam, _callback);

    }

    /**
     * Get team details
     * 
     * @param idTeam  (required)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team details </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsIdTeamGet(@javax.annotation.Nonnull Integer idTeam) throws ApiException {
        ApiResponse<Team> localVarResp = teamsIdTeamGetWithHttpInfo(idTeam);
        return localVarResp.getData();
    }

    /**
     * Get team details
     * 
     * @param idTeam  (required)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsIdTeamGetWithHttpInfo(@javax.annotation.Nonnull Integer idTeam) throws ApiException {
        okhttp3.Call localVarCall = teamsIdTeamGetValidateBeforeCall(idTeam, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team details (asynchronously)
     * 
     * @param idTeam  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdTeamGetAsync(@javax.annotation.Nonnull Integer idTeam, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsIdTeamGetValidateBeforeCall(idTeam, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsIdTeamPut
     * @param idTeam  (required)
     * @param teamUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdTeamPutCall(@javax.annotation.Nonnull Integer idTeam, @javax.annotation.Nonnull TeamUpdate teamUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamUpdate;

        // create path and map variables
        String localVarPath = "/teams/{idTeam}"
            .replace("{" + "idTeam" + "}", localVarApiClient.escapeString(idTeam.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsIdTeamPutValidateBeforeCall(@javax.annotation.Nonnull Integer idTeam, @javax.annotation.Nonnull TeamUpdate teamUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idTeam' is set
        if (idTeam == null) {
            throw new ApiException("Missing the required parameter 'idTeam' when calling teamsIdTeamPut(Async)");
        }

        // verify the required parameter 'teamUpdate' is set
        if (teamUpdate == null) {
            throw new ApiException("Missing the required parameter 'teamUpdate' when calling teamsIdTeamPut(Async)");
        }

        return teamsIdTeamPutCall(idTeam, teamUpdate, _callback);

    }

    /**
     * Update a team
     * 
     * @param idTeam  (required)
     * @param teamUpdate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
     </table>
     */
    public void teamsIdTeamPut(@javax.annotation.Nonnull Integer idTeam, @javax.annotation.Nonnull TeamUpdate teamUpdate) throws ApiException {
        teamsIdTeamPutWithHttpInfo(idTeam, teamUpdate);
    }

    /**
     * Update a team
     * 
     * @param idTeam  (required)
     * @param teamUpdate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsIdTeamPutWithHttpInfo(@javax.annotation.Nonnull Integer idTeam, @javax.annotation.Nonnull TeamUpdate teamUpdate) throws ApiException {
        okhttp3.Call localVarCall = teamsIdTeamPutValidateBeforeCall(idTeam, teamUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a team (asynchronously)
     * 
     * @param idTeam  (required)
     * @param teamUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdTeamPutAsync(@javax.annotation.Nonnull Integer idTeam, @javax.annotation.Nonnull TeamUpdate teamUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsIdTeamPutValidateBeforeCall(idTeam, teamUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsPost
     * @param teamCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsPostCall(@javax.annotation.Nonnull TeamCreate teamCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamCreate;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsPostValidateBeforeCall(@javax.annotation.Nonnull TeamCreate teamCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamCreate' is set
        if (teamCreate == null) {
            throw new ApiException("Missing the required parameter 'teamCreate' when calling teamsPost(Async)");
        }

        return teamsPostCall(teamCreate, _callback);

    }

    /**
     * Create a team
     * 
     * @param teamCreate  (required)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team created </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsPost(@javax.annotation.Nonnull TeamCreate teamCreate) throws ApiException {
        ApiResponse<Team> localVarResp = teamsPostWithHttpInfo(teamCreate);
        return localVarResp.getData();
    }

    /**
     * Create a team
     * 
     * @param teamCreate  (required)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsPostWithHttpInfo(@javax.annotation.Nonnull TeamCreate teamCreate) throws ApiException {
        okhttp3.Call localVarCall = teamsPostValidateBeforeCall(teamCreate, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a team (asynchronously)
     * 
     * @param teamCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsPostAsync(@javax.annotation.Nonnull TeamCreate teamCreate, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsPostValidateBeforeCall(teamCreate, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
